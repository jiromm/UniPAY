<?php

require_once 'IUniPAY.php';
require_once 'LocalException.php';

/**
 * @author Aram Baghdasaryan <aram.baghdasaryan@gmail.com>
 * @version 0.1.2
 * @package UniPAY
 * @link https://www.unipay.ge/API/TESTUPCONNECT/?WSDL
 * @license http://creativecommons.org/licenses/by/3.0/ Creative Commons Attribution 3.0 Unported (CC BY 3.0)
 *
 * Usage:
 *
 * <code>
 * require_once 'UniPAY.php';
 *
 * try {
 *      $unipay = new UniPAY('', '', '');
 *
 *      $result = $unipay->startAttachAccount(
 *          '', '', '', '', '', ''
 *      );
 *
 *      var_dump($result);
 *
 * } catch (SoapFault $e) {
 *      echo 'Connection Error: ' . $e->getMessage();
 * } catch (LocalException $e) {
 *      echo 'Local Error: ' . $e->getMessage();
 * } catch (Exception $e) {
 *      echo 'Unknown Error: ' . $e->getMessage();
 * }
 * </code>
 */
class UniPAY implements IUniPAY {
	const EC_SUCCESS = 0;
	const EC_MERCHANT_NOT_FOUND = 1;
	const EC_MERCHANT_IS_DISABLED = 2;
	const EC_ACCOUNT_NOT_FOUND = 3;
	const EC_ATTACHMENT_NOT_EXISTS = 4;
	const EC_ACTIVATION_CODE_IS_INVALID = 5;
	const EC_PRIVATE_NUMBER_IS_INVALID = 6;
	const EC_PIN_IS_ALREADY_IN_USE = 7;
	const EC_ACCOUNT_ALREADY_ACTIVATED = 8;
	const EC_AMOUNT_IS_LESS_THAN_POSSIBLE = 9;
	const EC_AMOUNT_IS_MORE_THAN_POSSIBLE = 10;
	const EC_ATTACHMENT_IS_INVALID = 11;
	const EC_DUPLICATE_TRANSACTION_ID = 12;
	const EC_BANK_ACCOUNT_NOT_FOUND = 13;
	const EC_CARD_NOT_FOUND = 14;
	const EC_CVC_NOT_DEFINED = 15;
	const EC_CURRENCY_IS_INVALID = 16;
	const EC_HASH_IS_INVALID = 17;
	const EC_INVALID_BANK_ID = 18;
	const EC_INVALID_IBAN_FORMAT = 19;
	const EC_ACCESS_DENIED = 20;

	private $soap;

	private $merchantId;
	private $secretKey;
	private $wsdl;

	/**
	 * Class constructor. Prepares the SOAP client
	 *
	 * @param int $merchantId (optional) Merchant Id generated by UniPAY system, this is a constant for every method.
	 * @param string $secretKey (optional) secret Key provided by UniPAY.
	 * @param string $wsdl (optional) WSDL URL.
	 *
	 * @throws SoapFault
	 * @throws Exception
	 */
	public function __construct($merchantId = null, $secretKey = null, $wsdl = null) {
		ini_set('soap.wsdl_cache_enabled', '0');
		ini_set('soap.wsdl_cache_ttl', '0');

		LocalException::prepareErrorHandler();

		$this->soap = new SoapClient($wsdl, array(
			"trace" => false,
			"exceptions" => true
		));

		$this->merchantId = $merchantId;
		$this->secretKey = $secretKey;
		$this->wsdl = $wsdl;
	}

	/**
	 * Set required parameters if these not setted when object created.
	 *
	 * @param int $merchantId Merchant Id generated by UniPAY system, this is a constant for every method.
	 * @param string $secretKey secret Key provided by UniPAY.
	 * @param string $wsdl WSDL URL.
	 *
	 * @see __construct You can already define this options when creating the object.
	 *
	 * @throws LocalException Already defined parameters can't be defined twice.
	 */
	public function setOptions($merchantId, $secretKey, $wsdl) {
		if ($this->merchantId === null) {
			$this->merchantId = $merchantId;
		} else {
			throw new LocalException('merchantId is not null');
		}

		if ($this->secretKey === null) {
			$this->secretKey = $secretKey;
		} else {
			throw new LocalException('secretKey is not null');
		}

		if ($this->wsdl === null) {
			$this->wsdl = $wsdl;
		} else {
			throw new LocalException('wsdl is not null');
		}
	}

	/**
	 * Generate unique HashCode for transaction.
	 *
	 * @param array $params Array of required parameters.
	 *
	 * @return string
	 * @throws LocalException
	 */
	private function getHash(array $params) {
		if (is_array($params) && count($params) > 0) {
			$params[] = $this->secretKey;
			$out = implode('|', $params);
			$out = strtoupper(md5($out));

			return $out;
		} else {
			throw new LocalException('Parameter must be an array');
		}
	}

	/**
	 * Constructor method to call SOAP functions.
	 *
	 * @param ReflectionClass $method UniPAY's WSDL function name.
	 * @param array $params Function parameters.
	 *
	 * @see ReflectionClass(__CLASS__)|getMethods(ReflectionClass::IS_PUBLIC) Parameter $method must be callable for current class. E.g. startAttachAccount, confirmAttachAccount, ...
	 *
	 * @return AbstractResult
	 * @throws SoapFault
	 * @throws LocalException
	 * @throws Exception
	 */
	private function doRequest($method, array $params) {
		if (is_array($params) && count($params) > 0) {
			if (is_callable(array(__CLASS__, $method))) {
				$method = ucwords($method);
				$params['Hash'] = $this->getHash($params);

				$res = $this->soap->__soapCall($method, array($params));

				if (is_soap_fault($res)) {
					throw new SoapFault('Data', 'Failed to get data');
				} else {
					$resultname = $method . 'Result';
					$result = $res->{$resultname};

					if (empty($result)) {
						throw new LocalException('Empty result');
					} else {
						return $result;
					}
				}
			} else {
				throw new LocalException('Parameter must be an array');
			}
		} else {
			throw new LocalException('Parameter must be an array');
		}
	}

	/**
	 * UniPAY and Merchant accounts must be attached and verified before to start transaction.
	 *
	 * @param int $attachID Order/Transaction/Doc increment id generated by SQL DBO. Every attachment in system must have an relational order in merchants system.
	 * @param int $privateNumber User private number must be verified and trusted.
	 * @param string $pin User Pin code or some user identification id in merchants system.
	 * @param int $upid User Account number in UniPAY system.
	 * @param string $name User name in Merchant system.
	 * @param string $surname User surname in Merchant system.
	 *
	 * @return StartAttachAccountResult
	 * @throws SoapFault
	 * @throws LocalException
	 * @throws Exception
	 */
	public function startAttachAccount($attachID, $privateNumber, $pin, $upid, $name, $surname) {
		return $result = $this->doRequest(__FUNCTION__, array(
			'MerchantId' => $this->merchantId,
			'AttachID' => $attachID,
			'PrivateNumber' => $privateNumber,
			'Pin' => $pin,
			'UPID' => $upid,
			'Name' => $name,
			'Surname' => $surname
		));
	}

	/**
	 * After calling this method account attachment is finished and merchant can use other public methods in unipay billing system.
	 *
	 * @param int $UPAttachID Attachment identifier in unipay system.
	 * @param int $code Activation code which was sent on users unipay email.
	 *
	 * @see startAttachAccount Value of $UPAttachID returns this method.
	 *
	 * @return ConfirmAttachAccountResult
	 * @throws Exception
	 * @throws SoapFault
	 * @throws LocalException
	 */
	public function confirmAttachAccount($UPAttachID, $code) {
		$params = array(
			'MerchantId' => $this->merchantId,
			'UPAttachID' => $UPAttachID,
			'Code' => $code
		);

		$params['Hash'] = $this->getHash($params);

		try {
			$res = $this->soap->__soapCall("ConfirmAttachAccount", array($params));

			if (is_soap_fault($res)) {
				throw new SoapFault('Data', 'Failed to get data');
			} else {
				$result = $res->ConfirmAttachAccountResult;

				if (empty($result)) {
					throw new LocalException('Empty result');
				} else {
					return $result;
				}
			}
		} catch (Exception $e) {
			throw new Exception($e->getMessage());
		}
	}

	/**
	 * After calling this method, this receiver amount is transferred on UniPAY Wallet.
	 *
	 * @param int $UPAttachID Attachment identifier in unipay system.
	 * @param string $attachID Attachment identifier in Merchant system.
	 * @param string $orderId Transaction ID in merchants system.
	 * @param int $amount Amount in TETRI (Georgian currency), 1GEL = 100TETRI, for example if amount is 1.00 GEL, passed argument will be 100 (1*100=100).
	 * @param string $currency (GEL, USD, EURO), Default value is GEL.
	 * @param string $token Unipay Transaction code, this is not available now, (not Available now).
	 *
	 * @see confirmAttachAccount Value of $UPAttachID returns this method.
	 *
	 * @return WalletResult
	 * @throws Exception
	 * @throws SoapFault
	 * @throws LocalException
	 */
	public function wallet($UPAttachID, $attachID, $orderId, $amount, $currency, $token) {
		$params = array(
			'MerchantId' => $this->merchantId,
			'UPAttachID' => $UPAttachID,
			'AttachID' => $attachID,
			'OrderId' => $orderId,
			'Amount' => $amount,
			'Currency' => $currency,
			'Token' => $token
		);

		$params['Hash'] = $this->getHash($params);

		try {
			$res = $this->soap->__soapCall("Wallet", array($params));

			if (is_soap_fault($res)) {
				throw new SoapFault('Data', 'Failed to get data');
			} else {
				$result = $res->WalletResult;

				if (empty($result)) {
					throw new LocalException('Empty result');
				} else {
					return $result;
				}
			}
		} catch (Exception $e) {
			throw new Exception($e->getMessage());
		}
	}

	/**
	 * Method Returns Banks Which User Has added in UniPAY account.
	 *
	 * @param int $UPAttachID Attachment identifier in UniPAY system.
	 * @param string $attachID Attachment identifier in Merchant system.
	 *
	 * @return getBankAccountsResult
	 * @throws Exception
	 * @throws SoapFault
	 * @throws LocalException
	 */
	public function getBankAccounts($UPAttachID, $attachID) {
		$params = array(
			'MerchantId' => $this->merchantId,
			'UPAttachID' => $UPAttachID,
			'AttachID' => $attachID
		);

		$params['Hash'] = $this->getHash($params);

		try {
			$res = $this->soap->__soapCall("GetBankAccounts", array($params));

			if (is_soap_fault($res)) {
				throw new SoapFault('Data', 'Failed to get data');
			} else {
				$result = $res->GetBankAccountsResult;

				if (empty($result)) {
					throw new LocalException('Empty result');
				} else {
					return $result;
				}
			}
		} catch (Exception $e) {
			throw new Exception($e->getMessage());
		}
	}

	/**
	 * Method Returns Banks Which User Has added in UniPAY account.
	 *
	 * @param int $UPAttachID Attachment identifier in UniPAY system.
	 * @param string $attachID Attachment identifier in Merchant system.
	 * @param string $orderId Transaction ID in merchants system.
	 * @param int $amount Amount in TETRI (Georgian currency), 1GEL = 100TETRI, for example if amount is 1.00 GEL, passed argument will be 100 (1*100=100), 2.5 GEL = 250 TETRI.
	 * @param string $currency (GEL, USD, EURO), Default value is GEL.
	 * @param int $bankAccountId Bank account id {@see BankAccount|id}.
	 * @param string $token Unipay Transaction code, this is not available now, (not Available now).
	 *
	 * @see BankAccount Required for $bankAccountId parameter.
	 *
	 * @return TransitResult
	 * @throws Exception
	 * @throws SoapFault
	 * @throws LocalException
	 */
	public function transit($UPAttachID, $attachID, $orderId, $amount, $currency, $bankAccountId, $token) {
		$params = array(
			'MerchantId' => $this->merchantId,
			'UPAttachID' => $UPAttachID,
			'AttachID' => $attachID,
			'OrderId' => $orderId,
			'Amount' => $amount,
			'Currency' => $currency,
			'BankAccountId' => $bankAccountId,
			'Token' => $token
		);

		$params['Hash'] = $this->getHash($params);

		try {
			$res = $this->soap->__soapCall("Transit", array($params));

			if (is_soap_fault($res)) {
				throw new SoapFault('Data', 'Failed to get data');
			} else {
				$result = $res->TransitResult;

				if (empty($result)) {
					throw new LocalException('Empty result');
				} else {
					return $result;
				}
			}
		} catch (Exception $e) {
			throw new Exception($e->getMessage());
		}
	}

	/**
	 * Method Returns Banks Which User Has added in UniPAY account.
	 *
	 * @param int $UPAttachID Attachment identifier in UniPAY system.
	 * @param string $attachID Attachment identifier in Merchant system.
	 *
	 * @return getCardsResult
	 * @throws Exception
	 * @throws SoapFault
	 * @throws LocalException
	 */
	public function getCards($UPAttachID, $attachID) {
		$params = array(
			'MerchantId' => $this->merchantId,
			'UPAttachID' => $UPAttachID,
			'AttachID' => $attachID
		);

		$params['Hash'] = $this->getHash($params);

		try {
			$res = $this->soap->__soapCall("GetCards", array($params));

			if (is_soap_fault($res)) {
				throw new SoapFault('Data', 'Failed to get data');
			} else {
				$result = $res->GetCardsResult;

				if (empty($result)) {
					throw new LocalException('Empty result');
				} else {
					return $result;
				}
			}
		} catch (Exception $e) {
			throw new Exception($e->getMessage());
		}
	}

	/**
	 * After calling this method amount is cuts on users Card (VISA|MC).
	 *
	 * @param int $UPAttachID Attachment identifier in UniPAY system.
	 * @param string $attachID Attachment identifier in Merchant system.
	 * @param string $orderId Transaction ID in merchants system.
	 * @param int $cardId Transaction ID in merchants system. {@fixme Must be fixed}
	 * @param int $amount Amount in TETRI (Georgian currency), 1GEL = 100TETRI, for example if amount is 1.00 GEL, passed argument will be 100 (1*100=100), 2.5 GEL = 250 TETRI.
	 * @param string $currency (GEL, USD, EURO), Default value is GEL.
	 * @param int $cvc Card CVC code.
	 * @param string $token Unipay Transaction code, this is not available now, (not Available now).
	 *
	 * @return ConfirmOpFromCardResult
	 * @throws Exception
	 * @throws SoapFault
	 * @throws LocalException
	 */
	public function confirmOpFromCard($UPAttachID, $attachID, $orderId, $cardId, $amount, $currency, $cvc, $token) {
		$params = array(
			'MerchantId' => $this->merchantId,
			'UPAttachID' => $UPAttachID,
			'AttachID' => $attachID,
			'OrderId' => $orderId,
			'CardId' => $cardId,
			'Amount' => $amount,
			'currency' => $currency, /** @fixme Must be transslated to Currency. The Word with uppercase letter in front.  */
			'cvc' => $cvc, /** @fixme Must be transslated to Cvc or CVC. The Word with uppercase letter in front.  */
			'Token' => $token
		);

		$params['Hash'] = $this->getHash($params);

		try {
			$res = $this->soap->__soapCall("ConfirmOpFromCard", array($params));

			if (is_soap_fault($res)) {
				throw new SoapFault('Data', 'Failed to get data');
			} else {
				$result = $res->ConfirmOpFromCardResult;

				if (empty($result)) {
					throw new LocalException('Empty result');
				} else {
					return $result;
				}
			}
		} catch (Exception $e) {
			throw new Exception($e->getMessage());
		}
	}

	/**
	 * Method Returns all Banks in UniPAY System, this method is used when user must choose bank to add his bank account.
	 *
	 * @param int $UPAttachID Attachment identifier in UniPAY system.
	 * @param string $attachID Attachment identifier in Merchant system.
	 *
	 * @return getAllBanksResult
	 * @throws Exception
	 * @throws SoapFault
	 * @throws LocalException
	 */
	public function getAllBanks($UPAttachID, $attachID) {
		$params = array(
			'MerchantId' => $this->merchantId,
			'UPAttachID' => $UPAttachID,
			'AttachID' => $attachID
		);

		$params['Hash'] = $this->getHash($params);

		try {
			$res = $this->soap->__soapCall("GetAllBanks", array($params));

			if (is_soap_fault($res)) {
				throw new SoapFault('Data', 'Failed to get data');
			} else {
				$result = $res->GetAllBanksResult;

				if (empty($result)) {
					throw new LocalException('Empty result');
				} else {
					return $result;
				}
			}
		} catch (Exception $e) {
			throw new Exception($e->getMessage());
		}
	}

	/**
	 * Method Returns all Banks in UniPAY System, this method is used when user must choose bank to add his bank account.
	 *
	 * @param int $UPAttachID Attachment identifier in UniPAY system.
	 * @param string $attachID Attachment identifier in Merchant system.
	 * @param int $bankId Attachment identifier in Merchant system.
	 * @param string $branch Banks branch {@see getAllBanks|branches}.
	 * @param string $fullname Users name and surname.
	 * @param string $bankAccount Bank IBAN number {@example GE38BG0000000481120400 (not card number)}.
	 * @param string $bankAccountName Some bank account name.
	 *
	 * @return AddBankAccountResult
	 * @throws Exception
	 * @throws SoapFault
	 * @throws LocalException
	 */
	public function addBankAccount($UPAttachID, $attachID, $bankId, $branch, $fullname, $bankAccount, $bankAccountName) {
		$params = array(
			'MerchantId' => $this->merchantId,
			'UPAttachID' => $UPAttachID,
			'AttachID' => $attachID,
			'BankId' => $bankId,
			'Branch' => $branch,
			'fullname' => $fullname,
			'BankAccount' => $bankAccount,
			'BankAccountName' => $bankAccountName
		);

		$params['Hash'] = $this->getHash($params);

		try {
			$res = $this->soap->__soapCall("GetAllBanks", array($params));

			if (is_soap_fault($res)) {
				throw new SoapFault('Data', 'Failed to get data');
			} else {
				$result = $res->GetAllBanksResult;

				if (empty($result)) {
					throw new LocalException('Empty result');
				} else {
					return $result;
				}
			}
		} catch (Exception $e) {
			throw new Exception($e->getMessage());
		}
	}
}
